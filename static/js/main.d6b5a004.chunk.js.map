{"version":3,"sources":["distance.js","App.js","serviceWorker.js","index.js"],"names":["distance","lat1","lon1","lat2","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","NORTHBOUND_COLUMNS","SOUTHBOUND_COLUMNS","NORTHBOUND_DEFAULT_GEO","SOUTHBOUND_DEFAULT_GEO","Timetable","name","stops","validUntil","Object","classCallCheck","this","Date","nameParts","split","direction","trim","schedule","concat","friendlySchedulename","friendlyDirection","TimetableSelector","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","navigator","geolocation","console","log","self","getCurrentPosition","position","coords","latitude","longitude","nDistance","sDistance","newDefaultTimeTable","getDefaultTimetableName","document","getElementById","value","changeTimeTable","warn","state","timetable","timetables","filter","t","isToday","getDay","dir","arguments","length","undefined","getTimetableNameForToday","event","target","targetTimetable","newTimetable","setState","react_default","a","createElement","className","href","id","onChange","map","i","key","friendlyName","friendlyColumns","r","c","scope","App_TimetableList","highlightNow","toLocaleDateString","Component","TimetableList","uglyTime","column","now","nowmins","getHours","getMinutes","allmins","minutesOfDay","_this2","s","Arrival","Time","friendlyTime","parts","h24","ampm","parseInt","App","_this3","parseTimetable","timetableForName","Content","TimetableFrame","obj","Name","timetableFrame","error","vehicleJourneys","ServiceJourney","journey","calls","Call","frameValidityConditions","AvailabilityCondition","ToDate","App_TimetableSelector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAkDeA,MAtBf,SAAkBC,EAAMC,EAAMC,EAAMC,EAAMC,GACtC,GAAKJ,IAASE,GAAUD,IAASE,EAC7B,OAAO,EAGP,IAAIE,EAAUC,KAAKC,GAAKP,EAAK,IACzBQ,EAAUF,KAAKC,GAAKL,EAAK,IACzBO,EAAQR,EAAKE,EACbO,EAAWJ,KAAKC,GAAKE,EAAM,IAC3BE,EAAOL,KAAKM,IAAIP,GAAWC,KAAKM,IAAIJ,GAAWF,KAAKO,IAAIR,GAAWC,KAAKO,IAAIL,GAAWF,KAAKO,IAAIH,GASpG,OARIC,EAAO,IACPA,EAAO,GAIXA,EAAc,IADdA,EAAc,KADdA,EAAOL,KAAKQ,KAAKH,IACCL,KAAKC,IACJ,OACR,MAAPH,IAAcO,GAAc,UACrB,MAAPP,IAAcO,GAAc,OACzBA,GCzCTI,EAAqB,CAAC,qBAAsB,oBAC5CC,EAAqB,CAAC,mBAAoB,sBAC1CC,EAAyB,CAAC,SAAU,UACpCC,EAAyB,CAAC,WAAY,YAEtCC,aACF,SAAAA,EAAYC,EAAMC,EAAOC,GAAaC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAClCM,KAAKL,KAAOA,EACZK,KAAKJ,MAAQA,EACbI,KAAKH,WAAa,IAAII,KAAKJ,GAG3B,IAAMK,EAAYP,EAAKQ,MAAM,KAC7BH,KAAKI,UAAYF,EAAU,GAAGG,OAC9BL,KAAKM,SAAYJ,EAAU,GAAGG,qEAI9B,MAA2B,MAAnBL,KAAKI,UAAqBd,EAAqBC,8CAIvD,MAA2B,MAAnBS,KAAKI,UAAqB,aAAe,4DAIjD,MAA2B,aAAnBJ,KAAKM,SAA2B,oBAAsBN,KAAKM,gDAInE,SAAAC,OAAUP,KAAKQ,uBAAf,MAAAD,OAA0CP,KAAKS,8BAIjDC,cAuBF,SAAAA,EAAYC,GAAO,IAAAC,EAIf,GAJed,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACfE,EAAAd,OAAAe,EAAA,EAAAf,CAAAE,KAAAF,OAAAgB,EAAA,EAAAhB,CAAAY,GAAAK,KAAAf,KAAMW,KACDK,aAAeJ,EAAKI,aAAaC,KAAlBnB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAc,KAEhBO,UAAUC,YAAa,CACvBC,QAAQC,IAAI,2BACZ,IAAMC,EAAIzB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAc,IACVO,UAAUC,YAAYI,mBAAmB,SAASC,GAC9CJ,QAAQC,IAAI,eAAgBG,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WACtE,IAAMC,EAAYvD,EAASmD,EAASC,OAAOC,SAAUF,EAASC,OAAOE,UAAWpC,EAAuB,GAAIA,EAAuB,GAAI,KAChIsC,EAAYxD,EAASmD,EAASC,OAAOC,SAAUF,EAASC,OAAOE,UAAWnC,EAAuB,GAAIA,EAAuB,GAAI,KAGtI,GAFA4B,QAAQC,IAAIO,EAAWC,GAEnBD,EAAYC,EAAW,CACvB,IAAIC,EAAsBrB,EAAkBsB,wBAAwB,KACpEX,QAAQC,IAAI,4BAA4BS,GACxCE,SAASC,eAAe,qBAAqBC,MAAQJ,EACrDR,EAAKa,gBAAgBL,QAErBV,QAAQC,IAAI,gCAIpBD,QAAQgB,KAAK,iDAvBF,OA0BfzB,EAAK0B,MAAQ,CACTC,UAAW5B,EAAM6B,WAAWC,OAAO,SAAAC,GAAC,OAAEA,EAAE/C,OAAOe,EAAkBsB,4BAA2B,GAC5FG,MAAOzB,EAAkBsB,0BACzBW,QAASjC,EAAkBiC,QAAQjC,EAAkBsB,4BA7B1CpB,+FAlBf,QADY,IAAIX,MAAO2C,UAEnB,KAAK,EACL,KAAK,EACD,MAAO,WACX,QACI,MAAO,6DAIqB,IAATC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAL,IAC/B,YAAAvC,OAAasC,EAAb,MAAAtC,OAAqBG,EAAkBuC,4DAI5Bd,GACX,OAAQA,IAAK,SAAA5B,OAAcG,EAAkBuC,6BAAgCd,IAAK,SAAA5B,OAAcG,EAAkBuC,kFAoCzGC,GACTlD,KAAKoC,gBAAgBc,EAAMC,OAAOhB,+CAGtBiB,GACZ,IAAMC,EAAerD,KAAKW,MAAM6B,WAAWC,OAAO,SAAAC,GAAC,OAAEA,EAAE/C,OAAOyD,IAAiB,GACzET,EAAUjC,EAAkBiC,QAAQS,GAC1CpD,KAAKsD,SAAS,SAAChB,EAAO3B,GAAR,MAAmB,CAC7B4B,UAAWc,EACXlB,MAAOxB,EAAMwB,MACbQ,QAASA,sCAKb,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,kBACAJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4BACZH,EAAAC,EAAAC,cAAA,UAAQG,GAAG,oBAAoBC,SAAU7D,KAAKgB,aAAaC,KAAKjB,MAAOmC,MAAOnC,KAAKsC,MAAMH,OACpFnC,KAAKW,MAAM6B,WAAWsB,IAAI,SAACpB,EAAEqB,GAAH,OAAOR,EAAAC,EAAAC,cAAA,UAAQO,IAAKD,EAAG5B,MAAOO,EAAE/C,MAAO+C,EAAEuB,qBAKhFV,EAAAC,EAAAC,cAAA,SAAOC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACKzD,KAAKsC,MAAMC,UAAU2B,kBAAkBJ,IAAI,SAACK,EAAEC,GAAH,OAAOb,EAAAC,EAAAC,cAAA,MAAIO,IAAKI,EAAGC,MAAM,OAAOF,OAGpFZ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAACa,EAAD,CAAe/B,UAAWvC,KAAKsC,MAAMC,UAAWgC,aAAcvE,KAAKsC,MAAMK,YAIjFY,EAAAC,EAAAC,cAAA,gBACQF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qDAAR,iBAA6EJ,EAAAC,EAAAC,cAAA,WACjFF,EAAAC,EAAAC,cAAA,sCAA8BzD,KAAKsC,MAAMC,UAAU1C,WAAW2E,qBAA9D,QACAjB,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,oBAAR,qBAhGTc,aAwG1BC,oLAiBQC,EAAUC,GAChB,IAAK5E,KAAKW,MAAM4D,aACZ,MAAO,GAEX,IAAMM,EAAM,IAAI5E,KACV6E,EAAW,GAAGD,EAAIE,WAAYF,EAAIG,aAClCC,EAAUP,EAAcQ,aAAaP,GAE3C,OAAIG,EAAUG,EACH,aAGI,IAAXL,GAAgBK,EAAQH,EAAU,GAC3B,cAGI,IAAXF,GAAgBK,EAAQH,EAAU,GAC3B,eAGJ,oCAGF,IAAAK,EAAAnF,KACL,OACIA,KAAKW,MAAM4B,UAAU3C,MAAMkE,IAAI,SAACsB,EAAErB,GAAH,OAC3BR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,GACJqB,EAAEtB,IAAI,SAACK,EAAEC,GAAH,OAAOb,EAAAC,EAAAC,cAAA,MAAIO,IAAKI,EAAGV,UAAWyB,EAAKzB,UAAUS,EAAEkB,QAAQC,KAAMlB,IAAKM,EAAca,aAAapB,EAAEkB,QAAQC,mDA1C1GX,GAChB,IAAMa,EAAQb,EAASxE,MAAM,KACvBsF,EAAMD,EAAM,GACZE,EAAOD,EAAM,GAAK,IAAM,IAE9B,SAAAlF,OADUkF,EAAM,GAAKA,EAAI,GAAKA,EAC9B,KAAAlF,OAAeiF,EAAM,IAArBjF,OAA0BmF,wCAGVf,GAChB,IAAMa,EAAQb,EAASxE,MAAM,KAG7B,OAAQ,GAFEwF,SAASH,EAAM,IACfG,SAASH,EAAM,WAbLf,aAwFbmB,cApBX,SAAAA,EAAYjF,GAAO,IAAAkF,EAAA/F,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,GAAA,OACfC,EAAA/F,OAAAe,EAAA,EAAAf,CAAAE,KAAAF,OAAAgB,EAAA,EAAAhB,CAAA8F,GAAA7E,KAAAf,KAAMW,KAKD2B,MAAQ,CACTE,WAHuB,CAAC,gBAAiB,gBAAiB,iBAAkB,kBAG/CsB,IAAI,SAAAvB,GAAS,OAAEqD,EAAIE,eAAevD,EAAWsD,EAAKE,iBAAiBxD,OAPrFsD,gFAfFlG,GACb,OAAO4C,EAAUyD,QAAQC,eAAexD,OAAO,SAAAyD,GAAG,OAAEA,EAAIC,OAAOxG,6CAM7CA,EAAMyG,GACxB,OAA6B,IAA1BA,EAAerD,QACd1B,QAAQgF,MAAR,2BAAA9F,OAAyCZ,IAClC,IAAID,EAAJ,GAAAa,OAAiBZ,EAAjB,gBAEJ,IAAID,EAAUC,EAAMyG,EAAe,GAAGE,gBAAgBC,eAAezC,IAAI,SAAA0C,GAAO,OAAEA,EAAQC,MAAMC,OAAON,EAAe,GAAGO,wBAAwBC,sBAAsBC,0DAelL,OACEtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACqD,EAAD,CAAmBtE,WAAYxC,KAAKsC,MAAME,qBA/BlCiC,aCtLEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASrF,SAASC,eAAe,SD2H3C,kBAAmBf,WACrBA,UAAUoG,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d6b5a004.chunk.js","sourcesContent":["//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n//:::                                                                         :::\n//:::  This routine calculates the distance between two points (given the     :::\n//:::  latitude/longitude of those points). It is being used to calculate     :::\n//:::  the distance between two locations using GeoDataSource (TM) prodducts  :::\n//:::                                                                         :::\n//:::  Definitions:                                                           :::\n//:::    South latitudes are negative, east longitudes are positive           :::\n//:::                                                                         :::\n//:::  Passed to function:                                                    :::\n//:::    lat1, lon1 = Latitude and Longitude of point 1 (in decimal degrees)  :::\n//:::    lat2, lon2 = Latitude and Longitude of point 2 (in decimal degrees)  :::\n//:::    unit = the unit you desire for results                               :::\n//:::           where: 'M' is statute miles (default)                         :::\n//:::                  'K' is kilometers                                      :::\n//:::                  'N' is nautical miles                                  :::\n//:::                                                                         :::\n//:::  Worldwide cities and other features databases with latitude longitude  :::\n//:::  are available at https://www.geodatasource.com                         :::\n//:::                                                                         :::\n//:::  For enquiries, please contact sales@geodatasource.com                  :::\n//:::                                                                         :::\n//:::  Official Web site: https://www.geodatasource.com                       :::\n//:::                                                                         :::\n//:::               GeoDataSource.com (C) All Rights Reserved 2018            :::\n//:::                                                                         :::\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\nfunction distance(lat1, lon1, lat2, lon2, unit) {\n    if ((lat1 === lat2) && (lon1 === lon2)) {\n        return 0;\n    }\n    else {\n        var radlat1 = Math.PI * lat1/180;\n        var radlat2 = Math.PI * lat2/180;\n        var theta = lon1-lon2;\n        var radtheta = Math.PI * theta/180;\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n        if (dist > 1) {\n            dist = 1;\n        }\n        dist = Math.acos(dist);\n        dist = dist * 180/Math.PI;\n        dist = dist * 60 * 1.1515;\n        if (unit===\"K\") { dist = dist * 1.609344 }\n        if (unit===\"N\") { dist = dist * 0.8684 }\n        return dist;\n    }\n}\n\nexport default distance;","import React, { Component } from 'react';\nimport './App.css';\nimport timetable from './timetable.json';\nimport distance from './distance.js';\n\nconst NORTHBOUND_COLUMNS = [\"Departs Ferry Bldg\", \"Arrives Larkspur\"];\nconst SOUTHBOUND_COLUMNS = [\"Departs Larkspur\", \"Arrives Ferry Bldg\"];\nconst NORTHBOUND_DEFAULT_GEO = [37.7955, -122.3937]; //Co-ordinates of sf ferry bldg\nconst SOUTHBOUND_DEFAULT_GEO = [37.946499, -122.509532]; //Co-ordinates of larkspur ferry\n\nclass Timetable {\n    constructor(name, stops, validUntil) {\n        this.name = name;\n        this.stops = stops;\n        this.validUntil = new Date(validUntil);\n\n        //The name encodes properties of the timetable ex. LF:S :Weekday\n        const nameParts = name.split(':');\n        this.direction = nameParts[1].trim();\n        this.schedule  = nameParts[2].trim();\n    }\n\n    friendlyColumns() {\n        return (this.direction === 'N') ? NORTHBOUND_COLUMNS : SOUTHBOUND_COLUMNS;\n    }\n\n    friendlyDirection() {\n        return (this.direction === 'N') ? \"Northbound\" : \"Southbound\";\n    }\n\n    friendlySchedulename() {\n        return (this.schedule) === 'Saturday' ? 'Weekend & Holiday' : this.schedule;\n    }\n\n    friendlyName() {\n        return `${this.friendlySchedulename()}: ${this.friendlyDirection()}`\n    }\n}\n\nclass TimetableSelector extends Component {\n\n    // Returns the name that the timetable dataset will use to represent 'today'\n    static getTimetableNameForToday() {\n        const day = new Date().getDay();\n        switch(day){\n            case 0:\n            case 6:\n                return 'Saturday';\n            default:\n                return 'Weekday';\n        }\n    }\n\n    static getDefaultTimetableName(dir='S') {\n        return `LF:${dir} :${TimetableSelector.getTimetableNameForToday()}`;\n    }\n\n    //Used for when you want special, time-aware treatment for when someone is looking at today's schedule\n    static isToday(value) {\n        return (value === `LF:S :${TimetableSelector.getTimetableNameForToday()}` || value === `LF:N :${TimetableSelector.getTimetableNameForToday()}`);\n    }\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n\n        if (navigator.geolocation) {\n            console.log(\"Fetching geolocation...\");\n            const self = this;\n            navigator.geolocation.getCurrentPosition(function(position) {\n                console.log(\"got position\", position.coords.latitude, position.coords.longitude);\n                const nDistance = distance(position.coords.latitude, position.coords.longitude, NORTHBOUND_DEFAULT_GEO[0], NORTHBOUND_DEFAULT_GEO[1], 'M');\n                const sDistance = distance(position.coords.latitude, position.coords.longitude, SOUTHBOUND_DEFAULT_GEO[0], SOUTHBOUND_DEFAULT_GEO[1], 'M');\n                console.log(nDistance, sDistance);\n                //If you're closer to the northbound default, change to northbound default\n                if (nDistance < sDistance) {\n                    var newDefaultTimeTable = TimetableSelector.getDefaultTimetableName('N');\n                    console.log(\"Triggering change event: \"+newDefaultTimeTable);\n                    document.getElementById('timetableSelector').value = newDefaultTimeTable;\n                    self.changeTimeTable(newDefaultTimeTable);\n                } else  {\n                    console.log(\"Not changing default.\")\n                }\n            });\n        } else {\n            console.warn(\"Geolocation is not supported by this browser.\");\n        }\n\n        this.state = {\n            timetable: props.timetables.filter(t=>t.name===TimetableSelector.getDefaultTimetableName())[0],\n            value: TimetableSelector.getDefaultTimetableName(),\n            isToday: TimetableSelector.isToday(TimetableSelector.getDefaultTimetableName())\n        };\n    }\n\n    handleChange(event) {\n        this.changeTimeTable(event.target.value);\n    }\n\n    changeTimeTable(targetTimetable) {\n        const newTimetable = this.props.timetables.filter(t=>t.name===targetTimetable)[0];\n        const isToday = TimetableSelector.isToday(targetTimetable);\n        this.setState((state, props) => ({\n            timetable: newTimetable,\n            value: props.value,\n            isToday: isToday\n        }));\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"/\">Larkspur Ferry</a>\n                    <form className=\"form-inline my-2 my-lg-0\">\n                        <select id=\"timetableSelector\" onChange={this.handleChange.bind(this)} value={this.state.value}>\n                            {this.props.timetables.map((t,i)=><option key={i} value={t.name}>{t.friendlyName()}</option>)}\n                        </select>\n                    </form>\n                </nav>\n\n                <table className=\"table table-sm\">\n                    <thead>\n                        <tr>\n                            {this.state.timetable.friendlyColumns().map((r,c)=><th key={c} scope=\"col\">{r}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <TimetableList timetable={this.state.timetable} highlightNow={this.state.isToday}/>\n                    </tbody>\n                </table>\n\n                <p>\n                    See <a href=\"http://goldengateferry.org/schedules/Larkspur.php\">Full Schedule</a><br />\n                    <small>Schedule valid until: {this.state.timetable.validUntil.toLocaleDateString()}&nbsp;</small>\n                    <small>Data courtesy <a href=\"https://511.org/\">511.org</a></small>\n                </p>\n\n            </div>\n        );\n    }\n}\n\nclass TimetableList extends Component {\n\n    static friendlyTime(uglyTime) {\n        const parts = uglyTime.split(':');\n        const h24 = parts[0];\n        const ampm = h24 > 11 ? 'p' : 'a';\n        const h = h24 > 12 ? h24-12 : h24;\n        return `${h}:${parts[1]}${ampm}`;\n    }\n\n    static minutesOfDay(uglyTime) {\n        const parts = uglyTime.split(':');\n        const h = parseInt(parts[0]);\n        const m = parseInt(parts[1]);\n        return (60*h)+m;\n    }\n\n    className(uglyTime, column) {\n        if (!this.props.highlightNow) {\n            return '';\n        }\n        const now = new Date();\n        const nowmins = (60*now.getHours())+now.getMinutes();\n        const allmins = TimetableList.minutesOfDay(uglyTime);\n\n        if (nowmins > allmins) {\n            return 'text-muted'\n        }\n\n        if (column === 0 && allmins-nowmins < 15) {\n            return 'text-danger';\n        }\n\n        if (column === 0 && allmins-nowmins < 60) {\n            return 'text-primary';\n        }\n\n        return '';\n    }\n\n    render() {\n        return (\n            this.props.timetable.stops.map((s,i)=>\n                <tr key={i}>\n                    {s.map((r,c)=><td key={c} className={this.className(r.Arrival.Time, c)}>{TimetableList.friendlyTime(r.Arrival.Time)}</td>)}\n                </tr>\n            )\n        )\n    }\n}\n\nclass App extends Component {\n\n    timetableForName(name) {\n        return timetable.Content.TimetableFrame.filter(obj=>obj.Name===name);\n    }\n\n    // Given a timetable object, returns a 2 dimensional array where each row\n    // is a route, and each column is a stop on that route. The values are the times (arrival & departure,\n    // which may be the same).\n    static parseTimetable(name, timetableFrame) {\n        if(timetableFrame.length === 0) {\n            console.error(`Got empty timetable for ${name}`);\n            return new Timetable(`${name} (Empty!!)`);\n        }\n        return new Timetable(name, timetableFrame[0].vehicleJourneys.ServiceJourney.map(journey=>journey.calls.Call), timetableFrame[0].frameValidityConditions.AvailabilityCondition.ToDate);\n    }\n\n    constructor(props) {\n        super(props);\n\n        //This is coded as a constant so we ensure the dropdown order is constant\n        const TIMETABLES_SHOWN   = [\"LF:S :Weekday\", \"LF:N :Weekday\", \"LF:S :Saturday\", \"LF:N :Saturday\"];\n\n        this.state = {\n            timetables: TIMETABLES_SHOWN.map(timetable=>App.parseTimetable(timetable, this.timetableForName(timetable)))\n        };\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <TimetableSelector timetables={this.state.timetables} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}